// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/mikejeuga/currency_converter/models"
	"github.com/mikejeuga/currency_converter/src/web"
	"sync"
)

// Ensure, that GatewayMock does implement web.Gateway.
// If this is not the case, regenerate this file with moq.
var _ web.Gateway = &GatewayMock{}

// GatewayMock is a mock implementation of web.Gateway.
//
//	func TestSomethingThatUsesGateway(t *testing.T) {
//
//		// make and configure a mocked web.Gateway
//		mockedGateway := &GatewayMock{
//			ConvertFunc: func(amount float64, baseCurrency string, foreignCurrency string) (models.Amount, error) {
//				panic("mock out the Convert method")
//			},
//			GetRateFunc: func(base string, foreign string) (models.Rate, error) {
//				panic("mock out the GetRate method")
//			},
//		}
//
//		// use mockedGateway in code that requires web.Gateway
//		// and then make assertions.
//
//	}
type GatewayMock struct {
	// ConvertFunc mocks the Convert method.
	ConvertFunc func(amount float64, baseCurrency string, foreignCurrency string) (models.Amount, error)

	// GetRateFunc mocks the GetRate method.
	GetRateFunc func(base string, foreign string) (models.Rate, error)

	// calls tracks calls to the methods.
	calls struct {
		// Convert holds details about calls to the Convert method.
		Convert []struct {
			// Amount is the amount argument value.
			Amount float64
			// BaseCurrency is the baseCurrency argument value.
			BaseCurrency string
			// ForeignCurrency is the foreignCurrency argument value.
			ForeignCurrency string
		}
		// GetRate holds details about calls to the GetRate method.
		GetRate []struct {
			// Base is the base argument value.
			Base string
			// Foreign is the foreign argument value.
			Foreign string
		}
	}
	lockConvert sync.RWMutex
	lockGetRate sync.RWMutex
}

// Convert calls ConvertFunc.
func (mock *GatewayMock) Convert(amount float64, baseCurrency string, foreignCurrency string) (models.Amount, error) {
	if mock.ConvertFunc == nil {
		panic("GatewayMock.ConvertFunc: method is nil but Gateway.Convert was just called")
	}
	callInfo := struct {
		Amount          float64
		BaseCurrency    string
		ForeignCurrency string
	}{
		Amount:          amount,
		BaseCurrency:    baseCurrency,
		ForeignCurrency: foreignCurrency,
	}
	mock.lockConvert.Lock()
	mock.calls.Convert = append(mock.calls.Convert, callInfo)
	mock.lockConvert.Unlock()
	return mock.ConvertFunc(amount, baseCurrency, foreignCurrency)
}

// ConvertCalls gets all the calls that were made to Convert.
// Check the length with:
//
//	len(mockedGateway.ConvertCalls())
func (mock *GatewayMock) ConvertCalls() []struct {
	Amount          float64
	BaseCurrency    string
	ForeignCurrency string
} {
	var calls []struct {
		Amount          float64
		BaseCurrency    string
		ForeignCurrency string
	}
	mock.lockConvert.RLock()
	calls = mock.calls.Convert
	mock.lockConvert.RUnlock()
	return calls
}

// GetRate calls GetRateFunc.
func (mock *GatewayMock) GetRate(base string, foreign string) (models.Rate, error) {
	if mock.GetRateFunc == nil {
		panic("GatewayMock.GetRateFunc: method is nil but Gateway.GetRate was just called")
	}
	callInfo := struct {
		Base    string
		Foreign string
	}{
		Base:    base,
		Foreign: foreign,
	}
	mock.lockGetRate.Lock()
	mock.calls.GetRate = append(mock.calls.GetRate, callInfo)
	mock.lockGetRate.Unlock()
	return mock.GetRateFunc(base, foreign)
}

// GetRateCalls gets all the calls that were made to GetRate.
// Check the length with:
//
//	len(mockedGateway.GetRateCalls())
func (mock *GatewayMock) GetRateCalls() []struct {
	Base    string
	Foreign string
} {
	var calls []struct {
		Base    string
		Foreign string
	}
	mock.lockGetRate.RLock()
	calls = mock.calls.GetRate
	mock.lockGetRate.RUnlock()
	return calls
}
